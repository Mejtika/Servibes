// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Servibes.Appointments.Infrastructure;

namespace Servibes.Appointments.Infrastructure.Migrations
{
    [DbContext(typeof(AppointmentsContext))]
    [Migration("20210107122640_LinkAppointmentWithCompany")]
    partial class LinkAppointmentWithCompany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("appointments")
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Servibes.Appointments.Core.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_cancellationReason")
                        .HasColumnName("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("_companyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_reserveeId")
                        .HasColumnName("ReserveeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("_companyId");

                    b.HasIndex("_reserveeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Servibes.Appointments.Core.Reservees.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Servibes.Appointments.Core.Reservees.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalkInId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Servibes.Appointments.Core.TimeReservations.TimeReservation", b =>
                {
                    b.Property<Guid>("TimeReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_companyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_employeeId")
                        .HasColumnName("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeReservationId");

                    b.ToTable("TimeReservations");
                });

            modelBuilder.Entity("Servibes.Appointments.Core.Appointments.Appointment", b =>
                {
                    b.HasOne("Servibes.Appointments.Core.Reservees.Company", null)
                        .WithMany()
                        .HasForeignKey("_companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Servibes.Appointments.Core.Reservees.Client", null)
                        .WithMany()
                        .HasForeignKey("_reserveeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Servibes.Appointments.Core.Appointments.Employee", "_employee", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnName("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnName("EmployeeName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.OwnsOne("Servibes.Appointments.Core.Appointments.Service", "_service", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnName("ServiceName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("Price")
                                .HasColumnName("ServicePrice")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.OwnsOne("Servibes.Appointments.Core.Shared.ReservationDate", "_reservedDate", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnName("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnName("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });
                });

            modelBuilder.Entity("Servibes.Appointments.Core.TimeReservations.TimeReservation", b =>
                {
                    b.OwnsOne("Servibes.Appointments.Core.Shared.ReservationDate", "_reservedDate", b1 =>
                        {
                            b1.Property<Guid>("TimeReservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnName("End")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Start")
                                .HasColumnName("Start")
                                .HasColumnType("datetime2");

                            b1.HasKey("TimeReservationId");

                            b1.ToTable("TimeReservations");

                            b1.WithOwner()
                                .HasForeignKey("TimeReservationId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
